#!/usr/local/bin/python3

import schema

__doc__ = '''
autolite control tool.

Usage:
    actl task list [-l | -J | -Y] [-r]
    actl task create <name> ({sched_flags})
                     [--command=<exe>] [--setup=<exe>] [--teardown=<exe>]
    actl (task | system) (read | delete) <name>
    actl task set <name> schedule ({sched_flags})
    actl task set <name> (setup | command | teardown) <exe>
    actl task set <name> parent <parent>
    actl task set <name> email <email>
    actl task reset <name> [--force]
    actl system list [-l | -J | -Y]
    actl system create <name> [--ip <ip>]
                     [--installer=<exe>] [--cleaner=<exe>] [--monitor=<exe>] [--config=<exe>]
    actl system set <name> ip <ip>
    actl system set <name> (installer | cleaner | monitor | config) <exe>
    actl system (acquire | install | clean | monitor | config) <name>
    actl system release <name> [--force]
    actl test [-- <arg>...]

Options:
    -h --help               Show this screen.
    --version               Show version.
    -v --verbose            Higher verbosity messages.
    -l --long               Table list long format.
    -J --JSON               List with JSON format.
    -Y --YAML               List with YAML format.
    -r --recursive          Task recursive listing, by lineage.
    --force                 Force the command.
{sched_opts}
    --command <exe>         Task command executable.
    --setup <exe>           Task setup executable (returns bool).
    --teardown <exe>        Task teardown executable.
    --installer <exe>       System installation executable.
    --cleaner <exe>         System cleaning executable.
    --monitor <exe>         System monitoring executable.
    --config <exe>          System configuration executable.
'''.format(
    sched_flags=' | '.join(('--' + sched) for sched in schema.SCHEDULES),
    sched_opts='\n'.join(
        '    -{upchar}, --{sched:17} Set task schedule to \'{sched}\'.'.format(sched=sched, upchar=sched[0].upper())
        for sched in schema.SCHEDULES),
)

import os
import sys

import db
import consts
import actl_task
import actl_system
from verbosity import set_verbosity, get_verbosity_level

SELF_ABS_PATH, SELF_FULL_DIR, SELF_SUB_DIR = consts.get_self_path_dir(__file__)


def actl(arguments):
    db.init()

    if arguments['task']:
        actl_task.menu(arguments)

    elif arguments['system']:
        actl_system.menu(arguments)

    elif arguments['test']:
        os.system('./actl_test ' +
                  '-{} '.format('v' * max(get_verbosity_level(), 1)) +
                  ' '.join(arg for arg in arguments['<arg>'] if arg != '--'))


def _verbosity_flags(doc: str) -> str:
    return '\n'.join(
        (d + ' [-v | -vv]') if d.lstrip().startswith('actl ') else d
        for d in doc.split('\n')
    )


if __name__ == '__main__':
    from docopt import docopt

    with open(os.path.join(SELF_FULL_DIR, 'version')) as ver_file:
        arguments = docopt(_verbosity_flags(__doc__), version=ver_file.read())

    set_verbosity(arguments['--verbose'])

    if get_verbosity_level() > 1:
        print(arguments)

    sys.exit(actl(arguments))
