#!/usr/local/bin/python3
'''
autolite control tool.

Usage:
    actl task list [-v | -vv]
    actl task (read | delete) <name> [-v | -vv]
    actl task create <name> (--continuous | --daily)
                     [--command=<cmd>] [--setup=<setup>] [--teardown=<teardown>] [-v | -vv]
    actl task set <name> schedule (--continuous | --daily) [-v | -vv]
    actl task set <name> (setup | command | teardown) <exe> [-v | -vv]
    actl reset [-v | -vv]

Arguments:
    <name>      Name of task.

Options:
    -h --help               Show this screen.
    --version               Show version.
    -v --verbose            Higher verbosity messages.
    -C, --continuous        Set task schedule to 'continuous'.
    -D, --daily             Set task schedule to 'daily'.
    --command <cmd>         Task executable command.
    --setup <setup>         Task executable setup (returns bool).
    --teardown <teardown>   Task executable teardown.
'''

import os
import sys
import itertools

import db
import consts
from common import fmtprint
from verbosity import set_verbosity, get_verbosity_level

SELF_ABS_PATH, SELF_FULL_DIR, SELF_SUB_DIR = consts.get_self_path_dir(__file__)

PACKAGE_NAME = SELF_SUB_DIR


def actl(arguments):
    db.init()

    if arguments['task']:
        task(arguments)

    elif arguments['reset']:
        if input('Confirm Db reset (N|y): ') == 'y':
            db.init(drop=True)
            print('Db have been reset!')

        else:
            print('Did not reset.')


def task(arguments):
    if arguments['list']:
        task_list()

    elif arguments['create']:
        db.create_task(**_task_create_kwargs(arguments))

    else:
        try:
            if arguments['read']:
                print(repr(db.read_task(name=arguments['<name>'])))

            elif arguments['set']:
                task_set(arguments)

            elif arguments['delete']:
                db.delete_task(name=arguments['<name>'])

        except NameError as exc:
            print(PACKAGE_NAME, 'Error!', exc)
            sys.exit(1)


def _task_create_kwargs(arguments):
    result = dict(
        name=arguments['<name>'],
        state='pending',
        setup=arguments['--setup'],
        command=arguments['--command'],
        teardown=arguments['--teardown'],
    )

    result.update(_task_sched_kwargs(arguments))

    return result


def _task_sched_kwargs(arguments):
    if arguments['--daily']:
        return dict(schedule='daily')

    elif arguments['--continuous']:
        return dict(schedule='continuous')

    else:
        return dict()


def task_list():
    tasks = (row.split('|') for row in db.list_tasks().split('\n'))
    taskiter1, taskiter2 = itertools.tee(tasks)
    widths = _measure_cols(taskiter1)

    titles = str(db.g_table_info.tasks).upper().split('|')
    widths = max(widths, _measure_cols([titles]))
    formats = [str('{:%d}' % width) for width in widths]

    fmtprint(titles, formats, sep='  ')

    for _task in taskiter2:
        fmtprint(_task, formats, sep='  ')


def _measure_cols(rows):
    widths = []

    for row in rows:
        for i, field in enumerate(row):
            try:
                widths[i] = max(widths[i], len(field))

            except IndexError:
                widths.insert(i, len(field))

    return widths


def task_set(arguments):
    kwargs = dict(
        (field, arguments['<exe>'])
        for field in ['setup', 'command', 'teardown']
        if arguments[field]
    )

    kwargs.update(name=arguments['<name>'], **_task_sched_kwargs(arguments))

    db.update_task(**kwargs)


if __name__ == '__main__':
    from docopt import docopt
    with open(os.path.join(SELF_FULL_DIR, 'version')) as ver_file:
        arguments = docopt(__doc__, version=ver_file.read())

    set_verbosity(arguments['--verbose'])

    if get_verbosity_level() > 1:
        print(arguments)

    sys.exit(actl(arguments))
