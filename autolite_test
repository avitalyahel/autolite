#!/usr/local/bin/python3
'''
autolite control tool unit test.

Usage:
    autolite_test [<filter>] [--list] [--resume] [-v | -vv | -vvv]

Arguments:
    <filter>        RegEx pattern to match test case names.

Options:
    -h --help       Show this screen.
    -v --verbose    Higher verbosity messages.
    -l --list       List name of test cases.
    --resume        Resume next on failure.
'''

import re
import os
import sys
import imp
import math
import yaml
import json
import getpass
import unittest

import docopt

import db
import settings
from common import AttrDict, redirected_stdout_context
from verbosity import verbose, set_verbosity, get_verbosity_level, verbosity_context


autolite = imp.load_source('autolite', './autolite')
runner = imp.load_source('runner', './runner')


class ActlTest(object):

    @classmethod
    def setUpClass(cls):
        import tempfile
        cls._tmpDir = tempfile.mkdtemp()
        verbose(2, 'created tmp dir:', cls._tmpDir)

        with settings.write_context() as user_settings:
            cls._saved_db_path = user_settings.db_path if 'db_path' in user_settings else ''
            user_settings.db_path = os.path.join(cls._tmpDir, 'my.db')
            verbose(2, 'set db_path to', user_settings.db_path)

        db.init()

    @classmethod
    def tearDownClass(cls):
        db.fini()
        import shutil

        try:
            shutil.rmtree(cls._tmpDir)
            verbose(2, 'removed tmp dir:', cls._tmpDir)

        except PermissionError as exc:
            if sys.platform == 'win32':
                verbose(2, 'raised:', exc)
                assert not os.listdir(cls._tmpDir), 'unexpected dir content'
                verbose(2, cls._tmpDir, 'is emtpy')

            else:
                raise exc

        del cls._tmpDir

        with settings.write_context() as user_settings:
            if cls._saved_db_path:
                user_settings.db_path = cls._saved_db_path
                verbose(2, 'reset db_path to', user_settings.db_path)

            else:
                del user_settings['db_path']
                verbose(2, 'deleted db_path from user setttings')

    def autolite(self, *cli) -> str:
        with redirected_stdout_context('autolite', *cli) as buf:
            autolite.autolite(docopt.docopt(autolite.__doc__))
            result = buf.getvalue()

        verbose(3, 'autolite', ' '.join(cli), '->\n', '\r' + result[:-1])
        return result

    def runner(self, *cli) -> str:
        with redirected_stdout_context('runner', *cli) as buf:
            print(runner)
            runner.main(docopt.docopt(runner.__doc__))
            result = buf.getvalue()

        verbose(3, 'runner', ' '.join(cli), '->\n', '\r' + result[:-1])
        return result


class ActlTestTask(ActlTest):

    def setUp(self):
        self._taskName = 't1'
        self.autolite('task create', self.taskName, '--daily')
        self.assertEqual(self.read_task(self.taskName).schedule, 'daily')

    @property
    def taskName(self):
        return self._taskName

    def read_task(self, name: str) -> AttrDict:
        task_str = self.autolite('task read ' + name)
        return AttrDict(yaml.load(task_str.replace(', ', '\n')))

    def tearDown(self):
        self.autolite('task delete', self.taskName)

        with self.assertRaises(SystemExit):
            self.read_task(self.taskName)


class TestTaskCRUD(ActlTestTask, unittest.TestCase):

    def test_task_crud_positive(self):
        for sched in ['continuous', 'daily', 'never']:
            self.autolite('task set', self.taskName, 'schedule --{}'.format(sched))
            self.assertEqual(self.read_task(self.taskName).schedule, sched)

        self.autolite('task set', self.taskName, 'command ls')
        self.assertEqual(self.read_task(self.taskName).command, 'ls')

        self.autolite('task set', self.taskName, 'setup echo')
        self.assertEqual(self.read_task(self.taskName).setup, 'echo')

        self.autolite('task set', self.taskName, 'teardown ssh')
        self.assertEqual(self.read_task(self.taskName).teardown, 'ssh')

        self.autolite('task set', self.taskName, 'parent Dad')
        self.assertEqual(self.read_task(self.taskName).parent, 'Dad')

        for task_list_flags in ['', '-l', '-r', '-lr', '-J', '-Y', '-rJ', '-rY']:
            out = self.autolite('task list', task_list_flags)

            if '-J' in task_list_flags or '-Y' in task_list_flags:
                tasks_dict = json.loads(out) if '-J' in task_list_flags else yaml.load(out)
                self.assertIn(self.taskName, tasks_dict[0])

    def test_task_crud_negative(self):
        with self.assertRaises(SystemExit):
            self.read_task('missing')

        self.assertNotEqual(self.read_task(self.taskName).schedule, 'continuous')

        with self.assertRaises(SystemExit):
            self.autolite('task set missing schedule --continuous')

        for attr in ('command', 'setup', 'teardown', 'parent'):
            with self.assertRaises(SystemExit):
                self.autolite('task set missing', attr, 'x')


class TestTaskState(ActlTestTask, unittest.TestCase):

    def test_task_state_update(self):
        for state in ['running', 'pending']:
            db.update('tasks', name=self.taskName, state=state)
            self.assertEqual(self.read_task(self.taskName).state, state)

    def test_task_reset_positive(self):
        db.update('tasks', name=self.taskName, state='failed')
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.autolite('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        with verbosity_context(level=1):
            self.assertIn('already pending.', self.autolite('task reset', self.taskName))

    def test_task_reset_negative(self):
        db.update('tasks', name=self.taskName, state='running')
        self.assertEqual(self.read_task(self.taskName).state, 'running')

        with self.assertRaises(SystemExit):
            self.autolite('task reset', self.taskName)

        self.autolite('task reset --force', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')


class ActlTestSystem(ActlTest):

    def setUp(self):
        self._systemName = 's1'
        self.autolite('system create', self.systemName)
        self.read_system(name=self.systemName)

    @property
    def systemName(self):
        return self._systemName

    def read_system(self, name: str) -> AttrDict:
        task_str = self.autolite('system read ' + name)
        return AttrDict(yaml.load(task_str.replace(', ', '\n')))

    def tearDown(self):
        self.autolite('system delete', self.systemName)

        with self.assertRaises(SystemExit):
            self.read_system(self.systemName)


class TestSystemCRUD(ActlTestSystem, unittest.TestCase):

    def test_system_crud_positive(self):
        for exe in 'installer | cleaner | monitor | config'.split(' | '):
            self.autolite('system set', self.systemName, exe, 'echo')
            self.assertEqual(getattr(self.read_system(self.systemName), exe), 'echo')
            self.autolite('system', exe.replace('er', ''), self.systemName)

        self.autolite('system set', self.systemName, 'ip', 'localhost')
        self.assertEqual(self.read_system(self.systemName).ip, 'localhost')

        for system_list_flags in ['', '-l', '-J', '-Y']:
            out = self.autolite('system list', system_list_flags)

            if '-J' in system_list_flags or '-Y' in system_list_flags:
                tasks_dict = json.loads(out) if '-J' in system_list_flags else yaml.load(out)
                self.assertIn(self.systemName, tasks_dict[0])

    def test_system_crud_negative(self):
        with self.assertRaises(SystemExit):
            self.autolite('system create', self.systemName)

        with self.assertRaises(SystemExit):
            self.read_system('missing')

        with self.assertRaises(SystemExit):
            self.autolite('system set missing ip bla')

        for exe in 'installer | cleaner | monitor | config'.split(' | '):
            with self.assertRaises(SystemExit):
                self.autolite('system set missing', exe, 'x')


class TestSystemState(ActlTestSystem, unittest.TestCase):

    def test_system_state_positive(self):
        self.autolite('system acquire', self.systemName)
        self.assertEqual(self.read_system(self.systemName).user, getpass.getuser())

        self.assertIn('You have already acquired', self.autolite('system acquire', self.systemName))

        self.autolite('system release', self.systemName)
        self.assertEqual(db.read(table='systems', name=self.systemName).user, '')

        self.assertIn('already free', self.autolite('system release', self.systemName))

    def test_system_state_negative(self):
        db.update(table='systems', name=self.systemName, user='bla')

        with self.assertRaises(SystemExit):
            self.autolite('system acquire', self.systemName)

        with self.assertRaises(SystemExit):
            self.autolite('system release', self.systemName)

        self.autolite('system release --force', self.systemName)
        self.assertEqual(db.read(table='systems', name=self.systemName).user, '')


class TestCronJob(ActlTestTask, unittest.TestCase):

    def setUp(self):
        super(TestCronJob, self).setUp()
        self.autolite('task set', self.taskName, 'schedule --continuous')
        self._v = '-{}'.format('v' * max(get_verbosity_level(), 1))

    def test_cron_job_positive(self):
        self.runner(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.runner(self._v, '--timeout 60')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.runner(self._v, '--interval 0.5')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.autolite('task set', self.taskName, 'schedule --daily')
        db.update('tasks', name=self.taskName, last='0')
        self.runner(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.autolite('task set', self.taskName, 'schedule --continuous')
        self.assertEqual(self.read_task(self.taskName).schedule, 'continuous')

    def test_cron_job_failure(self):
        self.autolite('task set', self.taskName, 'command false')
        self.runner(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.autolite('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

    def test_cron_job_timeout(self):
        db.update('tasks', name=self.taskName, command='sleep 0.5')
        self.assertEqual(self.read_task(self.taskName).command, 'sleep 0.5')

        self.runner(self._v, '--timeout 0.1')
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.autolite('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

    def test_cron_job_notify(self):
        import settings
        email_settings = settings.read().email

        if not email_settings.username or not email_settings.password:
            self.skipTest('missing settings for email username and/or passowrd'
                          ' (at settings-user.yaml, based on settings-default.yaml)')

        db.update('tasks', name=self.taskName, email=email_settings.username)
        self.runner(self._v)

        from task import Task
        Task(name=self.taskName).notify()


def suite(testCases: (unittest.TestCase, )) -> unittest.TestSuite:
    loadedTests = unittest.defaultTestLoader.loadTestsFromTestCase
    return unittest.TestSuite(loadedTests(case) for case in testCases)


class TestLister(object):

    def __init__(self, **kwargs):
        pass

    def run(self, suite: unittest.TestSuite):
        count = sum(1 for case in suite for test in case._tests)
        padding = math.ceil(math.log(count, 10))

        i = 0
        for case in suite:
            for test in case._tests:
                i += 1
                print(('{:%dd}' % padding).format(i), repr(test))


ALL_TEST_CASES = (
    TestTaskCRUD,
    TestTaskState,
    TestSystemCRUD,
    TestSystemState,
    TestCronJob,
)


if __name__ == '__main__':
    arguments = docopt.docopt(__doc__)
    set_verbosity(arguments['--verbose'])

    suite_runner_factory = TestLister if arguments['--list'] else unittest.TextTestRunner
    suite_runner = suite_runner_factory(
        stream=sys.stdout,
        verbosity=get_verbosity_level(),
        failfast=not arguments['--resume'],
    )

    if arguments['<filter>'] is None:
        suite_runner.run(suite(ALL_TEST_CASES))

    else:
        matched_cases = [test_case for test_case in ALL_TEST_CASES
                         if re.match(arguments['<filter>'], test_case.__name__)]

        if matched_cases:
            verbose(1, 'matched cases:', [t.__name__ for t in matched_cases])
            suite_runner.run(suite(matched_cases))

        else:
            verbose(0, 'Warning! no test cases matched for:', arguments['<filter>'])
