#!/usr/bin/env python

"""
autolite control tool unit test.

Usage:
    autolite_test [<filter>] [--list] [--resume] [-v | -vv | -vvv]

Arguments:
    <filter>        RegEx pattern to match test case names.

Options:
    -h --help       Show this screen.
    -v --verbose    Higher verbosity messages.
    -l --list       List name of test cases.
    --resume        Resume next on failure.
"""

import re
import os
import sys

import math
import yaml
import json
import getpass
import unittest

import docopt

import db
import common
import schema
import settings
from task import Task
from common import AttrDict, redirected_stdout_context
from verbosity import verbose, set_verbosity, get_verbosity_level, verbosity_context

autolite = common.load_module('autolite')
runner = common.load_module('runner')


class AutoliteTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        import tempfile
        cls._tmpDir = tempfile.mkdtemp()
        verbose(2, 'created tmp dir:', cls._tmpDir)

        with settings.write_context() as user_settings:
            cls._saved_db_path = user_settings.db_path if 'db_path' in user_settings else ''
            user_settings.db_path = os.path.join(cls._tmpDir, 'my.db')
            verbose(2, 'set db_path to', user_settings.db_path)

        db.init()

    @classmethod
    def tearDownClass(cls):
        db.fini()
        import shutil

        try:
            shutil.rmtree(cls._tmpDir)
            verbose(2, 'removed tmp dir:', cls._tmpDir)

        except PermissionError as exc:
            if sys.platform == 'win32':
                verbose(2, 'raised:', exc)
                assert not os.listdir(cls._tmpDir), 'unexpected dir content'
                verbose(2, cls._tmpDir, 'is emtpy')

            else:
                raise exc

        del cls._tmpDir

        with settings.write_context() as user_settings:
            if cls._saved_db_path:
                user_settings.db_path = cls._saved_db_path
                verbose(2, 'reset db_path to', user_settings.db_path)

            else:
                del user_settings['db_path']
                verbose(2, 'deleted db_path from user settings')

    def autolite(self, *cli) -> str:
        verbose(3, 'run autolite', ' '.join(cli))

        with redirected_stdout_context('autolite', *cli) as buf:
            args = docopt.docopt(autolite.__doc__)
            autolite.autolite(args)
            result = buf.getvalue()

        verbose(3, 'out:\r' + result[:-1])

        return result

    def runner(self, *cli) -> str:
        if not any('--interval' in c for c in cli):
            cli += ('--interval 0.25',)

        verbose(2, 'runner', *cli)

        with redirected_stdout_context('runner', *cli) as buf:
            runner.main(docopt.docopt(runner.__doc__))
            result = buf.getvalue()

        verbose(2, '->\n', '\r' + result[:-1])
        return result


class AutoliteTestTask(AutoliteTest):

    def setUp(self):
        super(AutoliteTestTask, self).setUp()
        self._taskName = 't1'
        self.autolite('task create', self.taskName, '--daily',
                      '--command bla --condition bla')
        self.assertEqual(self.read_task(self.taskName).schedule, 'daily')

        for attr in 'command condition'.split(' '):
            self.assertEqual(getattr(self.read_task(name=self.taskName), attr), 'bla')
            db.update('tasks', name=self.taskName, **{attr: ''})

    @property
    def taskName(self):
        return self._taskName

    def read_task(self, name: str) -> AttrDict:
        return db.read('tasks', name)

    def tearDown(self):
        self.autolite('task delete', self.taskName)

        with self.assertRaises(NameError):
            self.read_task(self.taskName)


class TestTaskCRUD(AutoliteTestTask):

    def test_task_crud_P1_positive(self):
        for sched in ['continuous', 'hourly', 'daily', 'never']:
            self.autolite('task set', self.taskName, 'schedule --{}'.format(sched))
            self.assertEqual(self.read_task(self.taskName).schedule, sched)

        self.autolite('task set', self.taskName, 'command ls')
        self.assertEqual(self.read_task(self.taskName).command, 'ls')

        self.autolite('task set', self.taskName, 'condition true')
        self.assertEqual(self.read_task(self.taskName).condition, 'true')

        self.autolite('task set', self.taskName, 'parent Dad')
        self.assertEqual(self.read_task(self.taskName).parent, 'Dad')

        self.autolite('task set', self.taskName, 'log', 'task.log')
        self.assertEqual(self.read_task(self.taskName).log, 'task.log')

        for name in ['', self.taskName]:
            for resources in ['Mine', '']:
                for task_list_flags in ['', '-l', '-r', '-lr', '-J', '-Y', '-rJ', '-rY']:

                    db.update(table='tasks', name=self.taskName, resources=resources)

                    if resources:
                        self.assertEqual(self.read_task(self.taskName).resources, resources)
                        out = self.autolite('task list', name, task_list_flags, '--not-holding', resources)

                    else:
                        out = self.autolite('task list', name, task_list_flags)

                    if get_verbosity_level() > 2:
                        out = '\n'.join(out.split('\n')[1:])

                    if task_list_flags == '-J':
                        self._assert_tasks(json.loads(out), resources)

                    elif task_list_flags == '-Y':
                        self._assert_tasks(yaml.load(out, Loader=yaml.FullLoader), resources)

    def _assert_tasks(self, dicts: [dict], resources: str):
        if resources:
            self.assertEqual(len(dicts), 0)

        else:
            self.assertEqual(self.taskName, dicts[0]['name'])

    def test_task_crud_P2_negative(self):
        with self.assertRaises(NameError):
            self.read_task('missing')

        self.assertNotEqual(self.read_task(self.taskName).schedule, 'continuous')

        with self.assertRaises(SystemExit):
            self.autolite('task set missing schedule --continuous')

        for attr in ('command', 'condition', 'parent'):
            with self.assertRaises(SystemExit):
                self.autolite('task set missing', attr, 'x')


class TestTaskState(AutoliteTestTask):

    def test_task_state_update(self):
        for state in ['running', 'pending']:
            db.update('tasks', name=self.taskName, state=state)
            self.assertEqual(self.read_task(self.taskName).state, state)

    def test_task_reset_P1_positive(self):
        db.update('tasks', name=self.taskName, state='failed')
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.autolite('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        with verbosity_context(level=1):
            self.assertIn('already pending.', self.autolite('task reset', self.taskName))

    def test_task_reset_P2_negative(self):
        db.update('tasks', name=self.taskName, state='running')
        self.assertEqual(self.read_task(self.taskName).state, 'running')

        with self.assertRaises(SystemExit):
            self.autolite('task reset', self.taskName)

        self.autolite('task reset --force', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')


class TestTaskInherit(AutoliteTestTask):

    def _create_inheritor_task(self, child_name: str, parent_name: str):
        self.autolite('task create', child_name, '--inherit', parent_name)

        parent = Task(name=parent_name)
        child = Task(name=child_name)
        self.assertEqual(child.parent, parent_name)
        verbose(2, 'parent:', str(parent))
        verbose(2, 'child:', str(child))

        return parent, child

    def test_task_inherit_P1_positive(self):
        child_name = 'child1'
        parent, child = self._create_inheritor_task(child_name, self.taskName)

        for attr in ('schedule', 'command', 'email'):
            self.assertEqual(getattr(child, attr), getattr(parent, attr), attr)

        self.autolite('task set', child_name, 'command', 'bla')
        self.assertEqual(self.read_task(child_name).command, 'bla')
        child = Task(name=child_name)
        self.assertNotEqual(child.command, parent.command)

        self.autolite('task delete', child_name)

    def test_task_inherit_P2_negative(self):
        child_name = 'child2'
        parent, child = self._create_inheritor_task(child_name, self.taskName)

        db.update('tasks', name=child.name, parent='')

        failed_child = Task(name=child_name)

        with self.assertRaises(AssertionError):
            verbose(2, 'failed child:', str(failed_child))

    def test_task_inherit_P3_complex(self):
        self._create_heritage(
            parent=self.taskName,
            children=dict(
                decendant1=dict(
                    decendant11=dict(
                        decendant111='decendant1111',
                    ),
                    decendant12='decendant121',
                ),
                decendant2=dict(
                    decendant21='decendant211',
                    decendant22='decendant221',
                ),
            ),
        )
        self.autolite('task list -rl')

        self.autolite('task set decendant1 schedule --continuous')
        self.autolite('task set decendant1 command echo')
        self.autolite('task set decendant1 email a@b.net')
        self.autolite('task set decendant1 condition true')

        for name in ['decendant1', 'decendant11', 'decendant121', 'decendant1111']:
            self.assertEqual(Task(name=name).schedule, 'continuous')
            self.assertEqual(Task(name=name).continuous, True)
            self.assertEqual(Task(name=name).command, 'echo')
            self.assertEqual(Task(name=name).email, 'a@b.net')
            self.assertEqual(Task(name=name).condition, True)

        self.autolite('task set decendant21 schedule --hourly')
        self.assertEqual(self.read_task('decendant21').schedule, 'hourly')

        self.assertEqual(Task(name='decendant211').schedule, 'hourly')
        self.assertEqual(Task(name='decendant211').hourly, True)

        self.assertEqual(Task(name='decendant221').schedule, 'daily')
        self.assertEqual(Task(name='decendant221').daily, True)

        out = self.autolite('task list --ancestor', 'decendant2')
        for child in 'decendant211 decendant221'.split(' '):
            self.assertIn(child, out)

    def _create_heritage(self, parent: str, children: dict):
        for child, grandchild in children.items():
            self._create_inheritor_task(child, parent)

            if isinstance(grandchild, dict):
                self._create_heritage(child, grandchild)

            else:
                self._create_inheritor_task(grandchild, child)


class TestTaskListFilters(AutoliteTestTask):

    def setUp(self):
        super(TestTaskListFilters, self).setUp()

        for i in range(4):
            name = self.taskName + '.%d' % (i + 1)
            self.autolite('task create', name,
                          '--' + schema.SCHEDULES[i % len(schema.SCHEDULES)],
                          '--command', 'cmd%d' % (i + 1),
                          '--condition', 'if%d' % (i + 1),
                          )

            resource = ''
            if i > 0:
                resource += 'resource-0'

            if i % 2:
                resource += ' resource-%d' % (i + 1)

            if resource:
                db.update(table='tasks', name=name, resources=resource)
                self.assertEqual(self.read_task(name).resources, resource)

    def tearDown(self):
        for i in range(4):
            name = self.taskName + '.%d' % (i + 1)
            self.autolite('task delete', name)

        super(TestTaskListFilters, self).tearDown()

    def test_task_P1_fields(self):
        for field in schema.TABLE_SCHEMAS.tasks.keys():
            out = self.autolite('task list -f', field)
            verbose(2, '\n' + out)
            self.assertIn(field.upper(), out)

            for other in schema.TABLE_SCHEMAS.tasks.keys():
                if other != field:
                    assert other not in out

    def test_task_P1_name(self):
        for i in range(4):
            name = self.taskName + '.%d' % (i + 1)
            out = self.autolite('task list', name)
            self.assertIn(name, out)

            for j in range(4):
                other = self.taskName + '.%d' % (j + 1)

                if other != name:
                    assert other not in out

    def test_task_P1_holdings(self):
        for i in range(4):
            if i % 2:
                resource = 'resource-%d' % (i + 1)
                out = self.autolite('task list -l', '--holding', resource)
                verbose(2, 'holding', resource + ':', '\n' + out)
                self.assertEqual(len(out.split('\n')), 3 if i % 2 else 2)
                self.assertIn(resource, out)

                for holding in ['', '--holding resource-0']:
                    out = self.autolite('task list -l', '--not-holding', resource, holding)
                    if holding == '':
                        verbose(2, 'not holding', resource + ':', '\n' + out)
                    else:
                        verbose(2, 'not holding', resource, 'and', holding + ':', '\n' + out)
                    self.assertEqual(out.count(resource), 0, 'unexpected ' + resource + '\n' + out)

        out = self.autolite('task list -l', '--holding', 'resource-')
        verbose(2, 'holding', 'resource-:', '\n' + out)
        self.assertEqual(len(out.split('\n')), 2)


class AutoliteTestSystem(AutoliteTest):

    def setUp(self):
        super(AutoliteTestSystem, self).setUp()
        self._systemName = 's1'
        self.autolite('system create', self.systemName,
                      '--ip ip --installer=exe --cleaner=exe --monitor=exe --config=exe --comment=text')
        self.assertEqual(self.read_system(name=self.systemName).ip, 'ip')
        self.assertEqual(self.read_system(name=self.systemName).comment, 'text')

        for attr in 'installer cleaner monitor config'.split(' '):
            self.assertEqual(getattr(self.read_system(name=self.systemName), attr), 'exe')
            db.update('systems', name=self.systemName, **{attr: ''})

    @property
    def systemName(self):
        return self._systemName

    def read_system(self, name: str) -> AttrDict:
        return db.read('systems', name)

    def tearDown(self):
        self.autolite('system delete', self.systemName)

        with self.assertRaises(NameError):
            self.read_system(self.systemName)


class TestSystemCRUD(AutoliteTestSystem):

    def test_system_crud_P1_positive(self):
        for exe in 'installer | cleaner | monitor | config'.split(' | '):
            self.autolite('system set', self.systemName, exe, 'echo')
            self.assertEqual(getattr(self.read_system(self.systemName), exe), 'echo')
            self.autolite('system', exe.replace('er', ''), self.systemName)

            db.update('systems', name=self.systemName, **{exe: 'if [ -z "$AUTOLITE_SYSTEM_NAME" ] ; then exit 1 ; fi'})
            self.autolite('system', exe.replace('er', ''), self.systemName)

        self.autolite('system set', self.systemName, 'ip', 'localhost')
        self.assertEqual(self.read_system(self.systemName).ip, 'localhost')

        self.autolite('system set', self.systemName, 'comment', 'bla-bla')
        self.assertEqual(self.read_system(self.systemName).comment, 'bla-bla')

        for system_list_flags in ['', '-1', '-l', '-J', '-Y']:
            out = self.autolite('system list', system_list_flags)

            if get_verbosity_level() > 2:
                out = '\n'.join(out.split('\n')[1:])

            if system_list_flags == '-J':
                self.assertEqual(self.systemName, json.loads(out)[0]['name'])

            elif system_list_flags == '-Y':
                self.assertEqual(self.systemName, yaml.load(out, Loader=yaml.FullLoader)[0]['name'])

    def test_system_crud_P2_negative(self):
        with self.assertRaises(SystemExit):
            self.autolite('system create', self.systemName)

        with self.assertRaises(NameError):
            self.read_system('missing')

        with self.assertRaises(SystemExit):
            self.autolite('system set missing ip bla')

        for exe in 'installer | cleaner | monitor | config'.split(' | '):
            with self.assertRaises(SystemExit):
                self.autolite('system set missing', exe, 'x')


class TestSystemState(AutoliteTestSystem):

    def test_system_state_P1_positive(self):
        self.autolite('system acquire', self.systemName)
        self.assertEqual(self.read_system(self.systemName).user, getpass.getuser())

        self.assertIn('you have already acquired', self.autolite('system acquire', self.systemName))

        self.autolite('system release', self.systemName)
        self.assertEqual(db.read(table='systems', name=self.systemName).user, '')

        self.assertIn('already free', self.autolite('system release', self.systemName))

    def test_system_state_P2_negative(self):
        db.update(table='systems', name=self.systemName, user='bla')

        with self.assertRaises(SystemExit):
            self.autolite('system acquire', self.systemName)

        with self.assertRaises(SystemExit):
            self.autolite('system release', self.systemName)

        self.autolite('system release --force', self.systemName)
        self.assertEqual(db.read(table='systems', name=self.systemName).user, '')


class TestSystemListFilters(AutoliteTestSystem):

    def setUp(self):
        super(TestSystemListFilters, self).setUp()

        for i in range(4):
            name = self.systemName + '.%d' % (i + 1)
            self.autolite('system create', name,
                          '--installer', 'ins%d' % (i + 1),
                          '--cleaner', 'cln%d' % (i + 1),
                          '--monitor', 'mon%d' % (i + 1),
                          '--config', 'conf%d' % (i + 1),
                          )

    def tearDown(self):
        for i in range(4):
            name = self.systemName + '.%d' % (i + 1)
            self.autolite('system delete', name)

        super(TestSystemListFilters, self).tearDown()

    def test_system_list_fields(self):
        for field in schema.TABLE_SCHEMAS.systems.keys():
            out = self.autolite('system list -f', field)
            verbose(2, '\n' + out)
            self.assertIn(field.upper(), out)

            for other in schema.TABLE_SCHEMAS.systems.keys():
                if other != field:
                    assert other not in out


class TestRunner(AutoliteTestTask):

    def setUp(self):
        super(TestRunner, self).setUp()
        self.autolite('task set', self.taskName, 'schedule --continuous')
        self._v = '-{}'.format('v' * max(get_verbosity_level(), 1))

    def test_runner_P1_positive(self):
        self.runner(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.runner(self._v, '--timeout 60')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.runner(self._v, '--interval 0.5')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        for sched in ['daily', 'hourly']:
            self.autolite('task set', self.taskName, 'schedule', '--' + sched)
            db.update('tasks', name=self.taskName, last='0')
            self.runner(self._v)
            self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.autolite('task set', self.taskName, 'schedule --continuous')
        self.assertEqual(self.read_task(self.taskName).schedule, 'continuous')

    def test_runner_task_arg(self):
        with open('assert-arg.py', 'w') as f:
            f.write('\n'.join([
                'import os',
                'assert os.environ["AUTOLITE_TASK_NAME"] == "{}"'.format(self.taskName),
            ]))

        db.update('tasks', name=self.taskName, command='python assert-arg.py')
        self.runner(self._v)
        os.remove('assert-arg.py')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

    def _create_task_once(self, name: str, command: str = 'true'):
        self.autolite('task create', name, '--continuous', '--once')
        self.autolite('task set', name, 'command', command)

    def test_runner_task_P2_once(self):
        self._create_task_once(name='once')
        self.runner(self._v)

        with self.assertRaises(NameError):
            self.read_task(name='once')

    def test_runner_task_P1_failed(self):
        self.autolite('task set', self.taskName, 'command false')
        self.runner(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.autolite('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self._create_task_once(name='once', command='false')
        self.runner(self._v)
        self.assertIn('<once>', self.read_task(name='once').last)
        self.autolite('task delete once')

    def test_runner_P3_timeout(self):
        db.update('tasks', name=self.taskName, command='sleep 0.3')
        self.assertEqual(self.read_task(self.taskName).command, 'sleep 0.3')

        self.runner(self._v, '--timeout 0.1')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.autolite('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

    def test_runner_P2_notify(self):
        import settings
        email_settings = settings.read().email

        if not email_settings.username or not email_settings.password:
            self.skipTest('missing settings for email username and/or passowrd'
                          ' (at settings-user.yaml, based on settings-default.yaml)')

        db.update('tasks', name=self.taskName, email=email_settings.username)
        self.runner(self._v)

        from task import Task
        Task(name=self.taskName).notify()

    def test_runner_P2_condition(self):
        for condition in [True, False]:
            task = self.read_task(self.taskName)
            task_last = task.last if 'last' in task else ''
            db.update('tasks', name=self.taskName, condition=str(condition).lower(), command='sleep 0.5')
            self.runner(self._v)
            lasts = (self.read_task(self.taskName).last, task_last)
            self.assertNotEqual(*lasts)


class TestCookBook(AutoliteTestTask):

    def setUp(self):
        super(TestCookBook, self).setUp()
        self._v = '-{}'.format('v' * max(get_verbosity_level(), 1))

    def test_job_queue(self):
        self.autolite('task create queue --continuous')
        db.update(table='tasks', name='queue',
                  condition='if [ `autolite task list queue -r --holding Mine | wc -l` -gt 1 ] ; then exit 1 ; fi')

        for i in range(3):
            job_name = 'job%d' % (i + 1)
            self.autolite('task create', job_name, '--inherit queue --once')
            db.update(table='tasks', name=job_name,
                      command='autolite task set $AUTOLITE_TASK_NAME resources Mine && sleep 0.5')

        for line in self.autolite('task list queue -r').split('\n'):
            if not line or '<autolite>' in line:
                continue

            job_name = line.split(':')[0].strip()

            if job_name == 'queue':
                continue

            self.runner(self._v)

            with self.assertRaises(NameError):
                self.read_task(job_name)


def suite(test_cases: (unittest.TestCase,)) -> unittest.TestSuite:
    loaded_tests = unittest.defaultTestLoader.loadTestsFromTestCase
    return unittest.TestSuite(loaded_tests(case) for case in test_cases)


class TestLister(object):

    def __init__(self, **kwargs):
        pass

    def run(self, suite: unittest.TestSuite):
        count = sum(len(case._tests) for case in suite)
        padding = math.ceil(math.log(count, 10))

        i = 0
        for case in suite:
            for test in case._tests:
                i += 1
                print(('{:%dd}' % padding).format(i), repr(test))


ALL_TEST_CASES = (
    TestTaskCRUD,
    TestTaskState,
    TestTaskInherit,
    TestTaskListFilters,
    TestSystemCRUD,
    TestSystemState,
    TestSystemListFilters,
    TestRunner,
    TestCookBook,
)

if __name__ == '__main__':
    arguments = docopt.docopt(__doc__)
    set_verbosity(arguments['--verbose'])

    suite_runner_factory = TestLister if arguments['--list'] else unittest.TextTestRunner
    suite_runner = suite_runner_factory(
        stream=sys.stdout,
        verbosity=get_verbosity_level(),
        failfast=not arguments['--resume'],
    )

    if arguments['<filter>'] is None:
        suite_runner.run(suite(ALL_TEST_CASES))

    else:
        matched_cases = [test_case for test_case in ALL_TEST_CASES
                         if re.match(arguments['<filter>'], test_case.__name__)]

        if matched_cases:
            verbose(1, 'matched cases:', [t.__name__ for t in matched_cases])
            suite_runner.run(suite(matched_cases))

        else:
            verbose(0, 'Warning! no test cases matched for:', arguments['<filter>'])
