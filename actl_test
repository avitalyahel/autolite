#!/usr/local/bin/python3
'''
autolite control tool unit test.

Usage:
    actl_test [<filter>] [-v | -vv | -vvv]

Arguments:
    <filter>        RegEx pattern to match test case names.

Options:
    -h --help       Show this screen.
    -v --verbose    Higher verbosity messages.
'''

import re
import os
import sys
import imp
import yaml
import unittest
from contextlib import contextmanager

import docopt

import db
from common import AttrDict
from verbosity import verbose, set_verbosity, get_verbosity_level, verbosity_context


actl = imp.load_source('actl', './actl')
crontab_job = imp.load_source('crontab_job', './crontab_job')


class ActlTest(object):

    @classmethod
    def setUpClass(cls):
        import tempfile
        cls._tmpDir = tempfile.mkdtemp()
        cls._cwd = os.getcwd()
        os.chdir(cls._tmpDir)
        verbose(2, 'created tmp dir:', os.getcwd())
        db.init()

    @classmethod
    def tearDownClass(cls):
        db.fini()
        import shutil
        shutil.rmtree(cls._tmpDir)
        verbose(2, 'removed tmp dir:', cls._tmpDir)
        del cls._tmpDir
        os.chdir(cls._cwd)

    @contextmanager
    def redirected_stdout_context(self, progname: str, *cli):
        sys.argv = [progname]
        for c in cli:
            sys.argv += c.split(' ')

        import io
        from contextlib import redirect_stdout

        with io.StringIO() as buf, redirect_stdout(buf):
            yield buf

    def actl(self, *cli) -> str:
        with self.redirected_stdout_context('actl', *cli) as buf:
            actl.actl(docopt.docopt(actl.__doc__))
            result = buf.getvalue()

        verbose(3, 'actl', ' '.join(cli), '->\n', '\r' + result[:-1])
        return result

    def crontab_job(self, *cli) -> str:
        with self.redirected_stdout_context('crontab_job', *cli) as buf:
            crontab_job.main(docopt.docopt(crontab_job.__doc__))
            result = buf.getvalue()

        verbose(3, 'crontab_job', ' '.join(cli), '->\n', '\r' + result[:-1])
        return result

    def setUp(self):
        self._taskName = 't1'
        self.actl('task create', self.taskName, '--daily')
        self.assertEqual(self.read_task(self.taskName).schedule, 'daily')

    @property
    def taskName(self):
        return self._taskName

    def read_task(self, name: str) -> AttrDict:
        return AttrDict(yaml.load(self.actl('task read ' + name).replace(', ', '\n')))

    def tearDown(self):
        self.actl('task delete', self.taskName)

        with self.assertRaises(SystemExit):
            self.read_task(self.taskName)


class TestTaskCRUD(ActlTest, unittest.TestCase):

    def test_task_crud_positive(self):
        for sched in ['continuous', 'daily', 'never']:
            self.actl('task set', self.taskName, 'schedule --{}'.format(sched))
            self.assertEqual(self.read_task(self.taskName).schedule, sched)

        self.actl('task set', self.taskName, 'command ls')
        self.assertEqual(self.read_task(self.taskName).command, 'ls')

        self.actl('task set', self.taskName, 'setup echo')
        self.assertEqual(self.read_task(self.taskName).setup, 'echo')

        self.actl('task set', self.taskName, 'teardown ssh')
        self.assertEqual(self.read_task(self.taskName).teardown, 'ssh')

    def test_task_crud_negative(self):
        with self.assertRaises(SystemExit):
            self.read_task('missing')

        self.actl('task create', self.taskName, '--daily')
        self.assertNotEqual(self.read_task(self.taskName).schedule, 'continuous')

        with self.assertRaises(SystemExit):
            self.actl('task set missing schedule --continuous')

        for exe in ('command', 'setup', 'teardown'):
            with self.assertRaises(SystemExit):
                self.actl('task set missing', exe, 'x')


class TestTaskState(ActlTest, unittest.TestCase):

    def test_task_state_update(self):
        for state in ['running', 'pending']:
            db.update_task(name=self.taskName, state=state)
            self.assertEqual(self.read_task(self.taskName).state, state)

    def test_task_reset_positive(self):
        db.update_task(name=self.taskName, state='failed')
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.actl('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        with verbosity_context(level=1):
            self.assertIn('already pending.', self.actl('task reset', self.taskName))

    def test_task_reset_negative(self):
        db.update_task(name=self.taskName, state='running')
        self.assertEqual(self.read_task(self.taskName).state, 'running')

        with self.assertRaises(SystemExit):
            self.actl('task reset', self.taskName)

        self.actl('task reset --force', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')


class TestCronJob(ActlTest, unittest.TestCase):

    def setUp(self):
        super(TestCronJob, self).setUp()
        self.actl('task set', self.taskName, 'schedule --continuous')
        self._v = '-{}'.format('v' * max(get_verbosity_level(), 1))

    def test_cron_job_positive(self):
        self.crontab_job(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.crontab_job(self._v, '--timeout 60')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.crontab_job(self._v, '--interval 0.5')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.actl('task set', self.taskName, 'schedule --daily')
        db.update_task(name=self.taskName, last='0')
        self.crontab_job(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.actl('task set', self.taskName, 'schedule --continuous')
        self.assertEqual(self.read_task(self.taskName).schedule, 'continuous')

    def test_cron_job_failure(self):
        self.actl('task set', self.taskName, 'command false')
        self.crontab_job(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.actl('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

    def test_cron_job_timeout(self):
        db.update_task(name=self.taskName, command='sleep 0.5')
        self.assertEqual(self.read_task(self.taskName).command, 'sleep 0.5')

        self.crontab_job(self._v, '--timeout 0.1')
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.actl('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')


def suite(testCases: (unittest.TestCase, )) -> unittest.TestSuite:
    loadedTests = unittest.defaultTestLoader.loadTestsFromTestCase
    return unittest.TestSuite(loadedTests(case) for case in testCases)


ALL_TEST_CASES = (
    TestTaskCRUD,
    TestTaskState,
    TestCronJob,
)


if __name__ == '__main__':
    arguments = docopt.docopt(__doc__)
    set_verbosity(arguments['--verbose'])

    runner = unittest.TextTestRunner(verbosity=get_verbosity_level())

    if arguments['<filter>'] is None:
        runner.run(suite(ALL_TEST_CASES))

    else:
        matched_cases = [test_case for test_case in ALL_TEST_CASES
                         if re.match(arguments['<filter>'], test_case.__name__)]

        if matched_cases:
            verbose(1, 'matched cases:', [t.__name__ for t in matched_cases])
            runner.run(suite(matched_cases))

        else:
            verbose(0, 'Warning! no test cases matched for:', arguments['<filter>'])
