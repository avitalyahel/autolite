#!/usr/local/bin/python3
'''
autolite control tool unit test.

Usage:
    actl_test [<filter>] [--list] [--resume] [-v | -vv | -vvv]

Arguments:
    <filter>        RegEx pattern to match test case names.

Options:
    -h --help       Show this screen.
    -v --verbose    Higher verbosity messages.
    -l --list       List name of test cases.
    --resume        Resume next on failure.
'''

import re
import os
import sys
import imp
import yaml
import getpass
import unittest

import docopt

import db
from common import AttrDict, redirected_stdout_context
from verbosity import verbose, set_verbosity, get_verbosity_level, verbosity_context


actl = imp.load_source('actl', './actl')
crontab_job = imp.load_source('crontab_job', './crontab_job')


class ActlTest(object):

    @classmethod
    def setUpClass(cls):
        import tempfile
        cls._tmpDir = tempfile.mkdtemp()
        cls._cwd = os.getcwd()
        os.chdir(cls._tmpDir)
        verbose(2, 'created tmp dir:', os.getcwd())
        db.init()

    @classmethod
    def tearDownClass(cls):
        db.fini()
        import shutil

        try:
            shutil.rmtree(cls._tmpDir)
            verbose(2, 'removed tmp dir:', cls._tmpDir)

        except PermissionError as exc:
            if sys.platform == 'win32':
                verbose(2, 'raised:', exc)
                assert not os.listdir(cls._tmpDir), 'unexpected dir content'
                verbose(2, cls._tmpDir, 'is emtpy')

            else:
                raise exc

        del cls._tmpDir
        os.chdir(cls._cwd)

    def actl(self, *cli) -> str:
        with redirected_stdout_context('actl', *cli) as buf:
            actl.actl(docopt.docopt(actl.__doc__))
            result = buf.getvalue()

        verbose(3, 'actl', ' '.join(cli), '->\n', '\r' + result[:-1])
        return result

    def crontab_job(self, *cli) -> str:
        with redirected_stdout_context('crontab_job', *cli) as buf:
            crontab_job.main(docopt.docopt(crontab_job.__doc__))
            result = buf.getvalue()

        verbose(3, 'crontab_job', ' '.join(cli), '->\n', '\r' + result[:-1])
        return result


class ActlTestTask(ActlTest):

    def setUp(self):
        self._taskName = 't1'
        self.actl('task create', self.taskName, '--daily')
        self.assertEqual(self.read_task(self.taskName).schedule, 'daily')

    @property
    def taskName(self):
        return self._taskName

    def read_task(self, name: str) -> AttrDict:
        task_str = self.actl('task read ' + name)
        return AttrDict(yaml.load(task_str.replace(', ', '\n')))

    def tearDown(self):
        self.actl('task delete', self.taskName)

        with self.assertRaises(SystemExit):
            self.read_task(self.taskName)


class TestTaskCRUD(ActlTestTask, unittest.TestCase):

    def test_task_crud_positive(self):
        for sched in ['continuous', 'daily', 'never']:
            self.actl('task set', self.taskName, 'schedule --{}'.format(sched))
            self.assertEqual(self.read_task(self.taskName).schedule, sched)

        self.actl('task set', self.taskName, 'command ls')
        self.assertEqual(self.read_task(self.taskName).command, 'ls')

        self.actl('task set', self.taskName, 'setup echo')
        self.assertEqual(self.read_task(self.taskName).setup, 'echo')

        self.actl('task set', self.taskName, 'teardown ssh')
        self.assertEqual(self.read_task(self.taskName).teardown, 'ssh')

    def test_task_crud_negative(self):
        with self.assertRaises(SystemExit):
            self.read_task('missing')

        self.assertNotEqual(self.read_task(self.taskName).schedule, 'continuous')

        with self.assertRaises(SystemExit):
            self.actl('task set missing schedule --continuous')

        for exe in ('command', 'setup', 'teardown'):
            with self.assertRaises(SystemExit):
                self.actl('task set missing', exe, 'x')


class TestTaskState(ActlTestTask, unittest.TestCase):

    def test_task_state_update(self):
        for state in ['running', 'pending']:
            db.update('tasks', name=self.taskName, state=state)
            self.assertEqual(self.read_task(self.taskName).state, state)

    def test_task_reset_positive(self):
        db.update('tasks', name=self.taskName, state='failed')
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.actl('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        with verbosity_context(level=1):
            self.assertIn('already pending.', self.actl('task reset', self.taskName))

    def test_task_reset_negative(self):
        db.update('tasks', name=self.taskName, state='running')
        self.assertEqual(self.read_task(self.taskName).state, 'running')

        with self.assertRaises(SystemExit):
            self.actl('task reset', self.taskName)

        self.actl('task reset --force', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')


class ActlTestSystem(ActlTest):

    def setUp(self):
        self._systemName = 's1'
        self.actl('system create', self.systemName)
        self.read_system(name=self.systemName)

    @property
    def systemName(self):
        return self._systemName

    def read_system(self, name: str) -> AttrDict:
        task_str = self.actl('system read ' + name)
        return AttrDict(yaml.load(task_str.replace(', ', '\n')))

    def tearDown(self):
        self.actl('system delete', self.systemName)

        with self.assertRaises(SystemExit):
            self.read_system(self.systemName)


class TestSystemCRUD(ActlTestSystem, unittest.TestCase):

    def test_system_crud_positive(self):
        for exe in 'installer | cleaner | monitor | config'.split(' | '):
            self.actl('system set', self.systemName, exe, 'echo')
            self.assertEqual(getattr(self.read_system(self.systemName), exe), 'echo')
            self.actl('system', exe.replace('er', ''), self.systemName)

        self.actl('system set', self.systemName, 'ip', 'localhost')
        self.assertEqual(self.read_system(self.systemName).ip, 'localhost')

    def test_system_crud_negative(self):
        with self.assertRaises(SystemExit):
            self.actl('system create', self.systemName)

        with self.assertRaises(SystemExit):
            self.read_system('missing')

        with self.assertRaises(SystemExit):
            self.actl('system set missing ip bla')

        for exe in 'installer | cleaner | monitor | config'.split(' | '):
            with self.assertRaises(SystemExit):
                self.actl('system set missing', exe, 'x')


class TestSystemState(ActlTestSystem, unittest.TestCase):

    def test_system_state_positive(self):
        self.actl('system acquire', self.systemName)
        self.assertEqual(self.read_system(self.systemName).user, getpass.getuser())

        self.assertIn('You have already acquired', self.actl('system acquire', self.systemName))

        self.actl('system release', self.systemName)
        self.assertEqual(db.read(table='systems', name=self.systemName).user, '')

        self.assertIn('already free', self.actl('system release', self.systemName))

    def test_system_state_negative(self):
        db.update(table='systems', name=self.systemName, user='bla')

        with self.assertRaises(SystemExit):
            self.actl('system acquire', self.systemName)

        with self.assertRaises(SystemExit):
            self.actl('system release', self.systemName)

        self.actl('system release --force', self.systemName)
        self.assertEqual(db.read(table='systems', name=self.systemName).user, '')


class TestCronJob(ActlTestTask, unittest.TestCase):

    def setUp(self):
        super(TestCronJob, self).setUp()
        self.actl('task set', self.taskName, 'schedule --continuous')
        self._v = '-{}'.format('v' * max(get_verbosity_level(), 1))

    def test_cron_job_positive(self):
        self.crontab_job(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.crontab_job(self._v, '--timeout 60')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.crontab_job(self._v, '--interval 0.5')
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.actl('task set', self.taskName, 'schedule --daily')
        db.update('tasks', name=self.taskName, last='0')
        self.crontab_job(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

        self.actl('task set', self.taskName, 'schedule --continuous')
        self.assertEqual(self.read_task(self.taskName).schedule, 'continuous')

    def test_cron_job_failure(self):
        self.actl('task set', self.taskName, 'command false')
        self.crontab_job(self._v)
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.actl('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')

    def test_cron_job_timeout(self):
        db.update('tasks', name=self.taskName, command='sleep 0.5')
        self.assertEqual(self.read_task(self.taskName).command, 'sleep 0.5')

        self.crontab_job(self._v, '--timeout 0.1')
        self.assertEqual(self.read_task(self.taskName).state, 'failed')

        self.actl('task reset', self.taskName)
        self.assertEqual(self.read_task(self.taskName).state, 'pending')


def suite(testCases: (unittest.TestCase, )) -> unittest.TestSuite:
    loadedTests = unittest.defaultTestLoader.loadTestsFromTestCase
    return unittest.TestSuite(loadedTests(case) for case in testCases)


class TestLister(object):

    def __init__(self, **kwargs):
        pass

    def run(self, suite: unittest.TestSuite):
        i = 0
        for case in suite:
            for test in case._tests:
                i += 1
                print(i, repr(test))


ALL_TEST_CASES = (
    TestTaskCRUD,
    TestTaskState,
    TestSystemCRUD,
    TestSystemState,
    TestCronJob,
)


if __name__ == '__main__':
    arguments = docopt.docopt(__doc__)
    set_verbosity(arguments['--verbose'])

    runner_factory = TestLister if arguments['--list'] else unittest.TextTestRunner
    runner = runner_factory(
        stream=sys.stdout,
        verbosity=get_verbosity_level(),
        failfast=not arguments['--resume'],
    )

    if arguments['<filter>'] is None:
        runner.run(suite(ALL_TEST_CASES))

    else:
        matched_cases = [test_case for test_case in ALL_TEST_CASES
                         if re.match(arguments['<filter>'], test_case.__name__)]

        if matched_cases:
            verbose(1, 'matched cases:', [t.__name__ for t in matched_cases])
            runner.run(suite(matched_cases))

        else:
            verbose(0, 'Warning! no test cases matched for:', arguments['<filter>'])
