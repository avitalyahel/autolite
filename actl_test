#!/usr/local/bin/python3
'''
autolite control tool unit test.

Usage:
    actl_test [<filter>] [-v | -vv | -vvv]

Arguments:
    <filter>        RegEx pattern to match test case names.

Options:
    -h --help       Show this screen.
    -v --verbose    Higher verbosity messages.
'''

import re
import os
import sys
import imp
import yaml
import unittest

import docopt

import db
from common import AttrDict
from verbosity import verbose, set_verbosity, get_verbosity_level


actl = imp.load_source('actl', './actl')


class ActlTest(object):

    @classmethod
    def setUpClass(cls):
        import tempfile
        cls._tmpDir = tempfile.mkdtemp()
        cls._cwd = os.getcwd()
        os.chdir(cls._tmpDir)
        verbose(2, 'created tmp dir:', os.getcwd())
        db.init()

    @classmethod
    def tearDownClass(cls):
        db.disconnect()
        import shutil
        shutil.rmtree(cls._tmpDir)
        verbose(2, 'removed tmp dir:', cls._tmpDir)
        del cls._tmpDir
        os.chdir(cls._cwd)

    def actl(self, *cli) -> str:
        sys.argv = ['actl']
        for c in cli:
            sys.argv += c.split(' ')

        import io
        from contextlib import redirect_stdout

        with io.StringIO() as buf, redirect_stdout(buf):
            actl.actl(docopt.docopt(actl.__doc__))
            result = buf.getvalue()

        verbose(3, ' '.join(sys.argv), '->\n', '\r' + result[:-1])
        return result

    @property
    def taskName(self):
        return 'task-name'

    def read_task(self, name: str) -> AttrDict:
        return AttrDict(yaml.load(self.actl('task read ' + name).replace(', ', '\n')))


class TestTaskCRUD(ActlTest, unittest.TestCase):

    def setUp(self):
        self._taskName = 't1'

    @property
    def taskName(self):
        return self._taskName

    def test_task_crud_positive(self):
        self.actl('task create', self.taskName, '--daily')
        self.assertEqual(self.read_task(self.taskName).schedule, 'daily')

        for sched in ['continuous', 'daily', 'never']:
            self.actl('task set', self.taskName, 'schedule --{}'.format(sched))
            self.assertEqual(self.read_task(self.taskName).schedule, sched)

        self.actl('task set', self.taskName, 'command ls')
        self.assertEqual(self.read_task(self.taskName).command, 'ls')

        self.actl('task set', self.taskName, 'setup echo')
        self.assertEqual(self.read_task(self.taskName).setup, 'echo')

        self.actl('task set', self.taskName, 'teardown ssh')
        self.assertEqual(self.read_task(self.taskName).teardown, 'ssh')

    def test_task_crud_negative(self):
        with self.assertRaises(SystemExit):
            self.read_task('missing')

        self.actl('task create', self.taskName, '--daily')
        self.assertNotEqual(self.read_task(self.taskName).schedule, 'continuous')

        with self.assertRaises(SystemExit):
            self.actl('task set missing schedule --continuous')

        for exe in ('command', 'setup', 'teardown'):
            with self.assertRaises(SystemExit):
                self.actl('task set missing', exe, 'x')

    def tearDown(self):
        self.actl('task delete', self.taskName)

        with self.assertRaises(SystemExit):
            self.read_task(self.taskName)


def suite(testCases: (unittest.TestCase, )) -> unittest.TestSuite:
    loadedTests = unittest.defaultTestLoader.loadTestsFromTestCase
    return unittest.TestSuite(loadedTests(case) for case in testCases)


ALL_TEST_CASES = (
    TestTaskCRUD,
)


if __name__ == '__main__':
    arguments = docopt.docopt(__doc__)
    set_verbosity(arguments['--verbose'])

    runner = unittest.TextTestRunner(verbosity=get_verbosity_level())

    if arguments['<filter>'] is None:
        runner.run(suite(ALL_TEST_CASES))

    else:
        matched_cases = [test_case for test_case in ALL_TEST_CASES
                         if re.match(arguments['<filter>'], test_case.__name__)]

        if matched_cases:
            verbose(1, 'matched cases:', [t.__name__ for t in matched_cases])
            runner.run(suite(matched_cases))

        else:
            verbose(0, 'Warning! no test cases matched for:', arguments['<filter>'])
